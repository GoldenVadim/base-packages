#!/bin/bash

# Основные метаданные пакета
PKG_NAME="dracut"
PKG_VERSION="106"
PKG_SRC_URL="https://github.com/dracut-ng/dracut-ng/archive/refs/tags/$PKG_VERSION.tar.gz"
PKG_ARCHITECTURE="all"
PKG_LICENSE="GPL-2.0"
PKG_DEPENDENCIES="bash:5.2.15 coreutils:9.5 cpio:2.15 gzip:1.13 kmod:30 util-linux:2.39.3 findutils:4.9.0 grep:3.11 sed:4.9"
PKG_FETCH_METHOD="wget"
PKG_INSTALL_DIR="/usr"
PKG_BUILD_DIR="dracut-ng-$PKG_VERSION"

# Разрешение зависимостей
resolve_dependencies() {
    if [ -n "$PKG_DEPENDENCIES" ]; then
        echo "Resolving dependencies..."
        for dep in $PKG_DEPENDENCIES; do
            local dep_name=$(echo $dep | cut -d: -f1)
            local dep_version=$(echo $dep | cut -d: -f2)
            echo "Checking dependency: $dep_name version $dep_version"
        done
    else
        echo "No dependencies."
    fi
}

# Фаза распаковки
unpack_stage() {
    echo "Unpacking sources to /tmp/$PKG_BUILD_DIR..."
    mkdir -p "/tmp/$PKG_BUILD_DIR"
    cd "/tmp/$PKG_BUILD_DIR" || exit 1
    if ! wget -q "$PKG_SRC_URL" -O "$PKG_NAME-$PKG_VERSION.tar.gz"; then
        echo "Error downloading sources from $PKG_SRC_URL"
        exit 1
    fi
    tar -xzf "$PKG_NAME-$PKG_VERSION.tar.gz" --strip-components=1 || exit 1
    rm "$PKG_NAME-$PKG_VERSION.tar.gz"
    echo "Unpacking completed."
}

# Фаза компиляции
compile_stage() {
    echo "Configuring and compiling package in /tmp/$PKG_BUILD_DIR..."
    cd "/tmp/$PKG_BUILD_DIR" || exit 1
    ./configure --prefix=/usr --sysconfdir=/etc || exit 1
    make || exit 1
    echo "Compilation completed."
}

# Фаза установки
install_stage() {
    echo "Installing package..."
    cd "/tmp/$PKG_BUILD_DIR" || exit 1
    make install || exit 1
    # Создание базовой конфигурации
    mkdir -p /etc/dracut.conf.d
    echo 'add_dracutmodules+=" base fs-lib kernel-modules "' > /etc/dracut.conf.d/10-openbase.conf
    echo "Installation completed."
}

# Общая стадия
default() {
    echo "Building and installing package $PKG_NAME version $PKG_VERSION..."
    resolve_dependencies
    unpack_stage
    compile_stage
    install_stage
}

# Эмулятор команд
emake() {
    case "$1" in
        "unpack")
            unpack_stage
            ;;
        "compile")
            compile_stage
            ;;
        "install")
            install_stage
            ;;
        *)
            echo "Unknown command: $1"
            exit 1
            ;;
    esac
}

# Обработка ошибок
handle_error() {
    echo "Error: Build or installation process failed."
    exit 1
}

# Главная функция
main() {
    trap 'handle_error' ERR
    emake "$1"
}

# Запуск
main "$@"
